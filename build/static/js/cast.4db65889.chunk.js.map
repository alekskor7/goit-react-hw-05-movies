{"version":3,"sources":["images/default.png","components/Cast/Cast.jsx"],"names":["Cast","movieId","useState","cast","setCast","showLoader","setShowLoader","useEffect","fetchMovieCredits","a","getMovieCredits","movieCredits","toast","error","message","theme","type","color","height","width","map","item","known_for_department","style","display","marginBottom","src","profile_path","alt","title","onError","e","target","onerror","marginLeft","name","character","id","slice"],"mappings":"qQAAe,MAA0B,oC,OCO1B,SAASA,EAAT,GAA4B,IAAZC,EAAW,EAAXA,QAC7B,EAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAkBA,OAhBAC,qBAAU,WACR,IAAMC,EAAiB,uCAAG,4BAAAC,EAAA,sEAEtBH,GAAc,GAFQ,SAGKI,YAAgBT,GAHrB,OAGhBU,EAHgB,OAItBP,EAAQO,GAJc,gDAMtBC,IAAMC,MAAM,KAAMC,QAAS,CAAEC,MAAO,YANd,yBAQtBT,GAAc,GARQ,4EAAH,qDAYvBE,MACC,CAACP,IAGF,gCACGI,GACC,cAAC,IAAD,CAAQW,KAAK,YAAYC,MAAM,UAAUC,OAAQ,GAAIC,MAAO,KAE7DhB,GACC,6BACGA,EACEiB,KAAI,SAAAC,GACH,MAAkC,WAA9BA,EAAKC,qBAEL,qBAEEC,MAAO,CAAEC,QAAS,OAAQC,aAAc,QAF1C,UAIE,qBAAKF,MAAO,CAAEJ,MAAO,SAArB,SACE,qBACEO,IAAG,yCAAoCL,EAAKM,cAC5CC,IAAKP,EAAKQ,MACVC,QAAS,SAAAC,GACPA,EAAEC,OAAOC,QAAU,KACnBF,EAAEC,OAAON,IAAMb,OAIrB,sBAAKU,MAAO,CAAEW,WAAY,QAA1B,UACE,6BAAKb,EAAKc,OACV,2CACa,IACX,+BACsB,KAAnBd,EAAKe,UACFf,EAAKe,UACL,2BApBLf,EAAKgB,IA4BT,QAERC,MAAM,EAAG","file":"static/js/cast.4db65889.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/default.8a5ba7e5.png\";","import { useState, useEffect } from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { getMovieCredits } from '../../Api/Api';\r\nimport error from '../../images/default.png';\r\n\r\nexport default function Cast({ movieId }) {\r\n  const [cast, setCast] = useState(null);\r\n  const [showLoader, setShowLoader] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchMovieCredits = async () => {\r\n      try {\r\n        setShowLoader(true);\r\n        const movieCredits = await getMovieCredits(movieId);\r\n        setCast(movieCredits);\r\n      } catch (error) {\r\n        toast.error(error.message, { theme: 'colored' });\r\n      } finally {\r\n        setShowLoader(false);\r\n      }\r\n    };\r\n\r\n    fetchMovieCredits();\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <div>\r\n      {showLoader && (\r\n        <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} />\r\n      )}\r\n      {cast && (\r\n        <ul>\r\n          {cast\r\n            .map(item => {\r\n              if (item.known_for_department === 'Acting') {\r\n                return (\r\n                  <li\r\n                    key={item.id}\r\n                    style={{ display: 'flex', marginBottom: '20px' }}\r\n                  >\r\n                    <div style={{ width: '150px' }}>\r\n                      <img\r\n                        src={`https://image.tmdb.org/t/p/w300${item.profile_path}`}\r\n                        alt={item.title}\r\n                        onError={e => {\r\n                          e.target.onerror = null;\r\n                          e.target.src = error;\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div style={{ marginLeft: '20px' }}>\r\n                      <h3>{item.name}</h3>\r\n                      <p>\r\n                        Character:{' '}\r\n                        <span>\r\n                          {item.character !== ''\r\n                            ? item.character\r\n                            : 'No information'}\r\n                        </span>\r\n                      </p>\r\n                    </div>\r\n                  </li>\r\n                );\r\n              }\r\n\r\n              return null;\r\n            })\r\n            .slice(0, 12)}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}